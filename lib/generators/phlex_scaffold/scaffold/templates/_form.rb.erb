# frozen_string_literal: true

module Views
<% if namespaced? -%>
  module <%= namespace.classify %>
<% end -%>
  module <%= controller_class_name.pluralize %>
    class Form < Views::Base
      include Phlex::Rails::Helpers::FormWith

      def initialize(<%= param_name %>:)
        @<%= param_name %> = <%= param_name %>
      end

      def view_template
        form_with(model: <%= instance_name %>, local: true, class: "space-y-6") do |form|
          # Display errors if any
          if <%= instance_name %>.errors.any?
            error_message = "#{<%= instance_name %>.errors.count} error#{'s' if <%= instance_name %>.errors.count != 1} prohibited this <%= model_name.downcase %> from being saved: #{<%= instance_name %>.errors.full_messages.join(', ')}"
            render Alert.new(message: error_message, variant: :error)
          end

<% form_attributes.each do |attribute| -%>
<% case attribute[:type] -%>
<% when 'text' -%>
          render FormGroup.new(
            label_text: "<%= attribute[:name].humanize %>",
            name: :<%= attribute[:name] %>,
            input_type: :textarea,
            id: "<%= singular_table_name %>_<%= attribute[:name] %>",
            required: true,
            rows: 4
          )
<% when 'boolean' -%>
          div(class: "form-control") do
            render Label.new(for_id: "<%= singular_table_name %>_<%= attribute[:name] %>") do
              "<%= attribute[:name].humanize %>"
            end
            render Checkbox.new(
              name: :<%= attribute[:name] %>,
              id: "<%= singular_table_name %>_<%= attribute[:name] %>"
            )
          end
<% when 'integer', 'decimal', 'float' -%>
          render FormGroup.new(
            label_text: "<%= attribute[:name].humanize %>",
            name: :<%= attribute[:name] %>,
            input_type: :number,
            id: "<%= singular_table_name %>_<%= attribute[:name] %>",
            required: true
          )
<% when 'date' -%>
          render FormGroup.new(
            label_text: "<%= attribute[:name].humanize %>",
            name: :<%= attribute[:name] %>,
            input_type: :date,
            id: "<%= singular_table_name %>_<%= attribute[:name] %>",
            required: true
          )
<% when 'datetime' -%>
          render FormGroup.new(
            label_text: "<%= attribute[:name].humanize %>",
            name: :<%= attribute[:name] %>,
            input_type: :"datetime-local",
            id: "<%= singular_table_name %>_<%= attribute[:name] %>",
            required: true
          )
<% when 'email' -%>
          render FormGroup.new(
            label_text: "<%= attribute[:name].humanize %>",
            name: :<%= attribute[:name] %>,
            input_type: :email,
            id: "<%= singular_table_name %>_<%= attribute[:name] %>",
            required: true
          )
<% else -%>
          render FormGroup.new(
            label_text: "<%= attribute[:name].humanize %>",
            name: :<%= attribute[:name] %>,
            input_type: :text,
            id: "<%= singular_table_name %>_<%= attribute[:name] %>",
            required: true
          )
<% end -%>

<% end -%>
          # Submit button
          div(class: "flex justify-end") do
            render Button.new(type: "submit", variant: :primary) do
              <%= instance_name %>.persisted? ? "Update <%= model_name %>" : "Create <%= model_name %>"
            end
          end
        end
      end

      private

      attr_reader :<%= param_name %>
    end
  end
<% if namespaced? -%>
end
<% end -%>
end 